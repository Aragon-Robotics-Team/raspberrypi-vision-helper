plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '4.0.3' apply false
}

mainClassName = 'Main' // Change with your own class and package

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jaci.gradle.EmbeddedTools' // Already used by GradleRIO so already imported

repositories {
    mavenCentral()
    flatDir {
        dirs '/usr/local/frc/java', 'lib' // jar dependencies are kept in lib/
    }
}

dependencies {
    compile 'com.google.code.gson:gson:2.8.5'

    compile name: 'wpiutil'
    compile name: 'ntcore'
    compile name: 'cscore'
    compile name: 'cameraserver'
    compile name: 'opencv-344'
    compile name: 'wpilibj'
    compile name: 'wpiHal'
}

//wrapper { // This was in the sample build.gradle but it does not seem to work in this context
    //gradleVersion = '5.0'
//}

deploy {
    targets {
		target('rpi') {
			directory = '/home/pi'
			failOnMissing = false // Do not fail with error if cannot connect
			timeout = 10          // Will search for pi maximum 10 seconds
			
			locations {
				ssh {
					address = 'frcvision.local'   // May also be raspberrypi.local. Change if different hostname or using static IP
					user = 'pi'                   // The address, username and password are the defaults
					password = 'raspberry'
				}
			}
		}
	}
	
	artifacts {
		all {
			directory = '.'
			targets << 'rpi'
		}
		
		commandArtifact('visionRW') {
			command = '/usr/bin/sudo /bin/mount -o remount,rw / ' // Mount filesystem read/write before upload
			dependsOn('deployVisionRWBootRpi')
		}
		
		commandArtifact('visionRWBoot') {
			command = '/usr/bin/sudo /bin/mount -o remount,rw /boot '
		}
		
		fileArtifact('visionCombinedJar') {
			file = file("build/libs/${project.name}-all.jar") // Single jar with all dependencies
			filename = 'uploaded.jar'                         // Rename to upload.jar for compatibility with web upload runCamera
			
			dependsOn('build')                                // Build project before deploy
			dependsOn('deployVisionRWRpi')
		}
		
		fileArtifact('visionRunCamera') {
			file = file('runCamera')                          // The default runCamera for uploaded jars
			filename = 'runCamera.tmp'                        // Will be renamed later
			
			dependsOn('deployVisionCombinedJarRpi')           // Run only after jar file is uploaded
			dependsOn('deployVisionRWRpi')
			
			// Prepare runCamera script
						
			postdeploy << { execute '/usr/bin/sudo /bin/chown 1000:1000 ./runCamera.tmp'}
			postdeploy << { execute 'tr -d \'\\r\' < "runCamera.tmp" | tee "runCamera"'}  // Fix newlines: No Windows carriage returns
			postdeploy << { execute '/usr/bin/sudo /bin/chown 1000:1000 ./runCamera'}
			postdeploy << { execute '/usr/bin/sudo /bin/chmod +x ./runCamera'}            // Make executable
			postdeploy << { execute '/usr/bin/sudo /bin/rm -fdr ./runCamera.tmp'}         // Delete temp file
			
			// Restart java program
			
			postdeploy << { execute '/usr/bin/sudo /usr/bin/killall java'}                // Kill existing code
			postdeploy << { execute '/usr/bin/sudo /usr/bin/killall -9 java'}
			postdeploy << { execute '/usr/bin/sudo /bin/bash ./runService'}               // Run new code
			
			postdeploy << { execute '/usr/bin/sudo /bin/mount -o remount,ro / ' }         // Mount filesystem readonly for safe shutdown
			postdeploy << { execute '/usr/bin/sudo /bin/mount -o remount,ro /boot ' }
		}
	}
}
